cmake_minimum_required(VERSION 3.17)

project(OperatingSystemsAssignment2 C CXX)

set(PCH dependencies/pch.h)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(APPLIED_COMPILE_OPTIONS)

add_subdirectory(test)
add_subdirectory(processes)
add_subdirectory(main)
add_subdirectory(dependencies)

list(APPEND LIBRARY_TARGETS
    Processes 
    ConsoleIO
    ProcessDatasets
    DatabaseManager
)

list(APPEND EXECUTABLE_TARGETS
    Main
    DatabaseManagerTestExec
    InputControlTestExec
    DailyTaskManagerTestExec
    ProcessesTestExec
)

list(APPEND PROJECT_TARGETS ${LIBRARY_TARGETS} ${EXECUTABLE_TARGETS})
# set(PROJECT_TARGETS 
#     Processes 
#     ProcessDatasets
#     Main 
#     DatabaseManager
#     ConsoleIO
#     DatabaseManagerTestExec
#     InputControlTestExec
#     DailyTaskManagerTestExec
#     ProcessesTestExec
# )

set(PROJECT_INCLUDE_DIRECTORIES 
    dependencies
    dependencies/console_interface
    dependencies/database_manager
    processes
    processes/datasets
    ${GTEST_INCLUDE_DIRS}
)

set(DEBUG_COMPILE_OPTIONS
    PUBLIC
    -W -Wall -Wextra
    -pedantic
    -Wfloat-equal
    -Wshadow
    -Wpointer-arith
    -Wcast-align
    -Wstrict-prototypes
    -Wstrict-overflow=5
    -Wwrite-strings
    -Waggregate-return
    -Wcast-qual
    -Wswitch-default
    -Wswitch-enum
    -Wconversion
    -Wunreachable-code
    -g
)
set(RELEASE_COMPILE_OPTIONS
    PUBLIC
    -O3
)

if(${CMAKE_BUILD_TYPE} EQUAL Release)
    set(APPLIED_COMPILE_OPITONS ${RELEASE_COMPILE_OPTIONS})
elseif(${CMAKE_BUILD_TYPE} EQUAL Debug)
    set(APPLIED_COMPILE_OPTIONS ${DEBUG_COMPILE_OPTIONS})
else()
    set(APPLIED_COMPILE_OPTIONS "")
endif()

foreach(TARGET ${PROJECT_TARGETS})
    target_compile_options(
        ${TARGET}
        PUBLIC ${APPLIED_COMPILE_OPTIONS}
    )
    target_include_directories(
        ${TARGET}
        PUBLIC ${PROJECT_INCLUDE_DIRECTORIES}
    )
    target_precompile_headers(
        ${TARGET}
        PUBLIC ${PCH}
    )
endforeach(TARGET C_TARGETS)

#Linking

# target_link_libraries(
#     Processes
#     PUBLIC DatabaseManager
#     PRIVATE ProcessDatasets
# )

# target_link_libraries(
#     Main
#     DatabaseManager
#     ConsoleIO
#     Processes
# )

# target_link_libraries(
#     ConsoleIO
#     DatabaseManager
# )

# target_link_libraries(
#     ProcessDatasets
#     ConsoleIO
# )

foreach (LIBRARY IN LISTS ${LIBRARY_TARGETS})
    set(LIB_EXCLUDED ${LIBRARY_TARGETS})
    list(REMOVE_ITEM  LIB_EXCLUDED ${LIBRARY})
    target_link_libraries(
        ${LIBRARY}
        ${LIB_EXCLUDED}
    )
endforeach()

foreach (EXECUTABLE IN LISTS ${EXECUTABLE_TARGETS})
    target_link_libraries(
        ${TEST_TARGET}
        ${LIBRARY_TARGETS}
        ${GTEST_LIBRARIES}
        gtest_main
        pthread
        stdc++fs
    )
endforeach()


# target_link_libraries(
#     DatabaseManagerTestExec
#     DatabaseManager
#     ${GTEST_LIBRARIES}
#     gtest_main
#     pthread
# )

# target_link_libraries(
#     InputControlTestExec
#     ConsoleIO
#     ${GTEST_LIBRARIES}
#     gtest_main
#     pthread
# )

# target_link_libraries(
#     DailyTaskManagerTestExec
#     ProcessDatasets
#     ConsoleIO
#     DatabaseManager
#     ${GTEST_LIBRARIES}
#     gtest_main
#     pthread
#     stdc++fs
# )
